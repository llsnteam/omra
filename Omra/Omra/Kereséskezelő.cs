///////////////////////////////////////////////////////////
//  Kereséskezelõ.cs
//  Implementation of the Class Kereséskezelõ
//  Generated by Enterprise Architect
//  Created on:      02-ápr.-2016 10:16:29
//  Original author: Dániel
///////////////////////////////////////////////////////////




using Adatkezelõ;
using Omra;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Adatkezelõ {
	public class Kereséskezelõ : IKereséskezelõ {

		public List<Bizonyíték> Bizonyítékkeresés(string azonosító){

            List<Bizonyíték> visszateresilista = new List<Bizonyíték>();

            bool IDkereses = false;     //ID-re keres (számmal kezdõdik) vagy a bizonyíték típusára keres (betûvel kezdõdik)

            for (int i = 0; i < 10; i++)
                if (azonosító.StartsWith(Convert.ToString(i))) IDkereses = true;

            if (IDkereses) //ha ID alapú
            {
                Decimal d = Convert.ToDecimal(azonosító);

                DatabaseElements DE = new DatabaseElements(); 

                var eredmeny = from x in DE.Bizonyitekok
                               where x.bizonyitekID == d
                               select x;

                foreach (var v in eredmeny)
                    visszateresilista.Add(new Bizonyíték(Convert.ToString(v.bizonyitekID), v.megnevezes, v.felvetel));
            }
            else //ha megnevezés alapú
            {
                DatabaseElements DE = new DatabaseElements();
                var eredmeny = from x in DE.Bizonyitekok
                               where x.megnevezes.Contains(azonosító)
                               select x;

                foreach (var v in eredmeny)
                    visszateresilista.Add(new Bizonyíték(Convert.ToString(v.bizonyitekID), v.megnevezes, v.felvetel));
            }

            return visszateresilista;
		}


		public List<Bûneset> Bûnesetkeresés(string azonosító){

            List<Bûneset> visszateresilista = new List<Bûneset>();

            if (azonosító != "")
            {
                Decimal d = Convert.ToDecimal(azonosító);

                DatabaseElements DE = new DatabaseElements();

                var eredmeny = from x in DE.Bunesetek
                               where x.bunesetID == d
                               select x;

                foreach (var v in eredmeny)
                {
                                       
                    visszateresilista.Add(new Bûneset(Convert.ToString(v.bunesetID), (BÁllapot)Enum.Parse(typeof(BÁllapot), v.allapot), v.felvetel, v.leiras));
                }
            }
            else
            {
                DatabaseElements DE = new DatabaseElements();

                var eredmeny = from x in DE.Bunesetek
                               select x;

                foreach (var v in eredmeny)
                {
                    visszateresilista.Add(new Bûneset(Convert.ToString(v.bunesetID), (BÁllapot)Enum.Parse(typeof(BÁllapot), v.allapot), v.felvetel, v.leiras));
                }
            }
            

            return visszateresilista;
		}


		public List<Dolgozó> Dolgozókeresés(string azonosito){

            List<Dolgozó> visszateresilista = new List<Dolgozó>();

            bool IDkereses = false;     //ID-re keres (számmal kezdõdik) vagy a bizonyíték típusára keres (betûvel kezdõdik)

            for (int i = 0; i < 10; i++)
                if (azonosito.StartsWith(Convert.ToString(i))) IDkereses = true;

            if (IDkereses) //ha ID alapú
            {
                Decimal d = Convert.ToDecimal(azonosito);

                DatabaseElements DE = new DatabaseElements();

                var eredmeny = from x in DE.Dolgozok
                               where x.dolgozoID == d
                               select x;

                foreach (var v in eredmeny)
                    visszateresilista.Add(new Dolgozó((Rang)Enum.Parse(typeof(Rang),v.rang.ToString()), v.jelszo, v.nev, v.lakcim, v.dolgozoID));
            }
            else //ha megnevezés alapú
            {
                DatabaseElements DE = new DatabaseElements();

                var eredmeny = from x in DE.Dolgozok
                               where x.nev.Contains(azonosito)
                               select x;

                foreach (var v in eredmeny)
                    visszateresilista.Add(new Dolgozó((Rang)Enum.Parse(typeof(Rang), v.rang.ToString()), v.jelszo, v.nev, v.lakcim, v.dolgozoID));
            }

			return visszateresilista;
		}


		public List<object> Keresés(string azonosító, KeresésTípus típus){

            //List<object> visszateresilista = new List<object>();

            //if (azonosító == "")
            //{
            //    if (típus == KeresésTípus.Bizonyíték)
            //    {
            //        bool IDkereses = false;     //ID-re keres (számmal kezdõdik) vagy a bizonyíték típusára keres (betûvel kezdõdik)
            //        for (int i = 0; i < 10; i++)
            //            if (azonosító.StartsWith(Convert.ToString(i))) IDkereses = true;

            //        if (IDkereses)
            //        {
            //            DatabaseElements DE = new DatabaseElements();


            //        }
            //        else
            //        {

            //        }
            //    }

            //    if (típus == KeresésTípus.Bûneset)
            //    {

            //    }

            //    if (típus == KeresésTípus.Dolgozó)
            //    {

            //    }

            //    if (típus == KeresésTípus.Gyanúsított)
            //    {

            //    }
            //}

            //else
            //{
            //    if (típus == KeresésTípus.Bizonyíték)
            //    {

            //    }

            //    if (típus == KeresésTípus.Bûneset)
            //    {

            //    }

            //    if (típus == KeresésTípus.Dolgozó)
            //    {

            //    }

            //    if (típus == KeresésTípus.Gyanúsított)
            //    {

            //    }
            //}
            //return visszateresilista;
            return new List<object>();
		}


		public List<Gyanúsított> Gyanúsítottkeresés(string azonosító){

			return null;
		}

	}//end Kereséskezelõ

}//end namespace Adatkezelõ