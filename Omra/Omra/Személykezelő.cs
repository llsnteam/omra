///////////////////////////////////////////////////////////
//  Személykezelõ.cs
//  Implementation of the Class Személykezelõ
//  Generated by Enterprise Architect
//  Created on:      02-ápr.-2016 10:16:29
//  Original author: gabi1_000
///////////////////////////////////////////////////////////




using Adatkezelõ;
using System.Collections.Generic;
namespace Adatkezelõ {
	public class Személykezelõ : IÜzenetkezelõ, IDolgozókezelõ, IGyanúsítottkezelõ {

		private List<Dolgozó> dolgozók;  
		private List<Gyanúsított> gyanúsítottak; 

		public Személykezelõ(){
            //---------------------------- dolgozókat és gyanúsítottakat lekérdezi az adatbázisból
		}

		~Személykezelõ(){

		}

		public virtual void Dispose(){

		}

		/// 
		/// <param name="azonosító"></param>
		/// <param name="jelszó"></param>
		public Dolgozó Azonosítás(string azonosító, string jelszó){
            Dolgozó dolg = null;
            foreach (Dolgozó d in dolgozók)
                if (d.GetAzonosító() == azonosító && d.GetJelszó() == jelszó)
                    dolg = d;

            return dolg; // null-t dob, ha nem létezik ez a dolgozó
		}

		/// 
		/// <param name="dolgozók"></param>
		public Dolgozó DolgozóKeresés(List<Dolgozó> dolgozók){
            //keresésbe került?
			return null;
		}

		/// 
		/// <param name="dolgozó"></param>
		public void DolgozóMódosítása(Dolgozó dolgozó){
            for (int i = 0; i < dolgozók.Count; i++ )
                if (dolgozók[i].GetAzonosító() == dolgozó.GetAzonosító())
                {
                    dolgozók[i] = dolgozó;
                    //------------------------------- Adatbázist módosítja: megkeresi ezzel az azonosítóval rendelkezõ dolgozót, és minden adatát felülírja
                }
		}

		/// 
		/// <param name="Dolgozó"></param>
		public void DolgozóTörlése(Dolgozó Dolgozó){
            dolgozók.Remove(Dolgozó);
            //------------------------------------------- Adatbázisból törli
		}

		/// 
		/// <param name="Gyanúsított"></param>
		/// <param name="Bûneset"></param>
		public void GyanúsítottHozzáadása(Gyanúsított Gyanúsított, Bûneset Bûneset){
            Bûneset.GyanúsítottHozzáadása(Gyanúsított);
            //---------------------------------Adatbázisban a bûnesetet módosítani
		}

		/// 
		/// <param name="gyanúsított"></param>
		public void GyanúsítottMódosítása(Gyanúsított gyanúsított){
            for (int i = 0; i < gyanúsítottak.Count; i++)
                if (gyanúsítottak[i].GetAzonosító() == gyanúsított.GetAzonosító())
                {
                    gyanúsítottak[i] = gyanúsított;
                    //------------------------------- Adatbázist módosítja: megkeresi ezzel az azonosítóval rendelkezõ gyanúsítottat, és minden adatát felülírja
                }
		}

		/// 
		/// <param name="jelszó"></param>
		/// <param name="beosztás"></param>
		/// <param name="név"></param>
		/// <param name="azonosító"></param>
		/// <param name="lakcím"></param>
		public void ÚjDolgozó(string jelszó, Rang beosztás, string név, string azonosító, string lakcím){

		}

		/// 
		/// <param name="gyanúsítottStátusz"></param>
		/// <param name="lakcím"></param>
		/// <param name="személyiAzonosító"></param>
		/// <param name="név"></param>
		public void ÚjGyanúsított(GyanúsítottStátusz gyanúsítottStátusz, string lakcím, string személyiAzonosító, string név){

		}

		/// 
		/// <param name="üzenet"></param>
		public void ÜzenetKüldése(Üzenet üzenet){

		}

		public Üzenet ÜzenetMegtekintése(){

			return null;
		}

		/// 
		/// <param name="üzenet"></param>
		public void ÜzenetTörlése(Üzenet üzenet){

		}


        public void ÜzenetKüldése(string törzs, string tárgy, Dolgozó küldõ, Dolgozó címzett)
        {
            throw new System.NotImplementedException();
        }

        public List<Üzenet> ÜzenetMegtekintése(Dolgozó Dolgozó)
        {
            throw new System.NotImplementedException();
        }
    }//end Személykezelõ

}//end namespace Adatkezelõ